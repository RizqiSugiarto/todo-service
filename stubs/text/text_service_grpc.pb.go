// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.12
// source: text/text_service.proto

package text

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	TextService_Create_FullMethodName         = "/proto.TextService/Create"
	TextService_Get_FullMethodName            = "/proto.TextService/Get"
	TextService_GetAllByUserID_FullMethodName = "/proto.TextService/GetAllByUserID"
	TextService_Update_FullMethodName         = "/proto.TextService/Update"
	TextService_Delete_FullMethodName         = "/proto.TextService/Delete"
)

// TextServiceClient is the client API for TextService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TextServiceClient interface {
	Create(ctx context.Context, in *CreateTextRequest, opts ...grpc.CallOption) (*TextBaseResponse, error)
	Get(ctx context.Context, in *GetTextByIDRequest, opts ...grpc.CallOption) (*GetTextByIDResponse, error)
	GetAllByUserID(ctx context.Context, in *GetAllTextByActivityIDRequest, opts ...grpc.CallOption) (*GetAllTextByActivityIDResponse, error)
	Update(ctx context.Context, in *UpdateTextByIDRequest, opts ...grpc.CallOption) (*TextBaseResponse, error)
	Delete(ctx context.Context, in *DeleteTextByIDRequest, opts ...grpc.CallOption) (*TextBaseResponse, error)
}

type textServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTextServiceClient(cc grpc.ClientConnInterface) TextServiceClient {
	return &textServiceClient{cc}
}

func (c *textServiceClient) Create(ctx context.Context, in *CreateTextRequest, opts ...grpc.CallOption) (*TextBaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TextBaseResponse)
	err := c.cc.Invoke(ctx, TextService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *textServiceClient) Get(ctx context.Context, in *GetTextByIDRequest, opts ...grpc.CallOption) (*GetTextByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTextByIDResponse)
	err := c.cc.Invoke(ctx, TextService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *textServiceClient) GetAllByUserID(ctx context.Context, in *GetAllTextByActivityIDRequest, opts ...grpc.CallOption) (*GetAllTextByActivityIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllTextByActivityIDResponse)
	err := c.cc.Invoke(ctx, TextService_GetAllByUserID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *textServiceClient) Update(ctx context.Context, in *UpdateTextByIDRequest, opts ...grpc.CallOption) (*TextBaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TextBaseResponse)
	err := c.cc.Invoke(ctx, TextService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *textServiceClient) Delete(ctx context.Context, in *DeleteTextByIDRequest, opts ...grpc.CallOption) (*TextBaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TextBaseResponse)
	err := c.cc.Invoke(ctx, TextService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TextServiceServer is the server API for TextService service.
// All implementations must embed UnimplementedTextServiceServer
// for forward compatibility
type TextServiceServer interface {
	Create(context.Context, *CreateTextRequest) (*TextBaseResponse, error)
	Get(context.Context, *GetTextByIDRequest) (*GetTextByIDResponse, error)
	GetAllByUserID(context.Context, *GetAllTextByActivityIDRequest) (*GetAllTextByActivityIDResponse, error)
	Update(context.Context, *UpdateTextByIDRequest) (*TextBaseResponse, error)
	Delete(context.Context, *DeleteTextByIDRequest) (*TextBaseResponse, error)
	mustEmbedUnimplementedTextServiceServer()
}

// UnimplementedTextServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTextServiceServer struct {
}

func (UnimplementedTextServiceServer) Create(context.Context, *CreateTextRequest) (*TextBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedTextServiceServer) Get(context.Context, *GetTextByIDRequest) (*GetTextByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedTextServiceServer) GetAllByUserID(context.Context, *GetAllTextByActivityIDRequest) (*GetAllTextByActivityIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllByUserID not implemented")
}
func (UnimplementedTextServiceServer) Update(context.Context, *UpdateTextByIDRequest) (*TextBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedTextServiceServer) Delete(context.Context, *DeleteTextByIDRequest) (*TextBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedTextServiceServer) mustEmbedUnimplementedTextServiceServer() {}

// UnsafeTextServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TextServiceServer will
// result in compilation errors.
type UnsafeTextServiceServer interface {
	mustEmbedUnimplementedTextServiceServer()
}

func RegisterTextServiceServer(s grpc.ServiceRegistrar, srv TextServiceServer) {
	s.RegisterService(&TextService_ServiceDesc, srv)
}

func _TextService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TextService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextServiceServer).Create(ctx, req.(*CreateTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TextService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTextByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TextService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextServiceServer).Get(ctx, req.(*GetTextByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TextService_GetAllByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllTextByActivityIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextServiceServer).GetAllByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TextService_GetAllByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextServiceServer).GetAllByUserID(ctx, req.(*GetAllTextByActivityIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TextService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTextByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TextService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextServiceServer).Update(ctx, req.(*UpdateTextByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TextService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTextByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TextService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextServiceServer).Delete(ctx, req.(*DeleteTextByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TextService_ServiceDesc is the grpc.ServiceDesc for TextService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TextService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TextService",
	HandlerType: (*TextServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _TextService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _TextService_Get_Handler,
		},
		{
			MethodName: "GetAllByUserID",
			Handler:    _TextService_GetAllByUserID_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _TextService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _TextService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "text/text_service.proto",
}
